name: ECS

on:
  workflow_call:

jobs:

  ECS:
    runs-on: ubuntu-latest
    steps:
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition first-run-task-definition --query taskDefinition > task-definition.json
        
    - name: copia de seguranÃ§a task-definition.json
      run: cp task-definition.json task-definition.json.old

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: custom
        image: leonardosartorello/go_ci:${{ github.run_number }}
        environment-variables: |
          HOST=${{ secrets.DBHOST }}
          DBPORT=${{ secrets.DBPORT }}
          PORT=8000
          USER=${{ secrets.DBUSER }}
          PASSWORD=${{ secrets.DBPASSWORD }}
          DBNAME=${{ secrets.DBNAME }}
        

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: custom-service
        cluster: default
        wait-for-service-stability: true
        
    - name: Request
      continue-on-error: true
      run: wget ec2co-ecsel-1on764jf1vx3m-1396771799.us-east-2.elb.amazonaws.com:8000/
    - run: echo "REQUEST=$(echo $?)" >> $GITHUB_ENV
    - run: echo ${{ env.REQUEST }}

    - name: rollback
      if: ${{ env.REQUEST }} =! 0
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: task-definition.json.old
        service: custom-service
        cluster: default
        wait-for-service-stability: true
      
